name: 构建 Cursor 工具集

on:
  push:
    branches: [ main ]
    paths:
      - 'cursor_tools.py'
      - '.github/workflows/build-artifact.yml'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'cursor_tools.py'
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    name: 构建 ${{ matrix.os }}-${{ matrix.arch }} 版本
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64
          - os: windows-latest
            arch: x64
            output_name: cursor-tools.exe
            asset_name: cursor-tools-windows-x64.exe

          # macOS x64 (Intel)
          - os: macos-latest
            arch: x64
            output_name: cursor-tools
            asset_name: cursor-tools-macos-x64

          # macOS arm64 (Apple Silicon)
          - os: macos-latest
            arch: arm64
            output_name: cursor-tools
            asset_name: cursor-tools-macos-arm64

          # Linux x64
          - os: ubuntu-latest
            arch: x64
            output_name: cursor-tools
            asset_name: cursor-tools-linux-x64

          # 注意：GitHub Actions 目前不直接支持 ARM Linux 和 ARM Windows 运行器
          # 我们可以使用交叉编译来构建这些平台的二进制文件

    steps:
    - name: 检出代码
      uses: actions/checkout@v3

    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 安装 Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: 配置 Poetry
      run: |
        poetry config virtualenvs.create false

    - name: 安装依赖
      run: |
        poetry install --with dev --no-interaction

    - name: 获取版本号
      id: get_version
      run: |
        VERSION=$(poetry version -s)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash

    - name: 创建图标目录
      run: mkdir -p icons
      shell: bash

    - name: 创建基本图标 (备用)
      run: |
        echo "Creating placeholder icon"
        python -c "
        from PIL import Image, ImageDraw
        import os
        # 创建一个简单的图标
        img = Image.new('RGBA', (256, 256), color=(0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        draw.rectangle([(50, 50), (206, 206)], fill='#3584e4')
        draw.rectangle([(70, 70), (186, 186)], fill='#ffffff')

        # 保存为不同格式
        if not os.path.exists('icons'):
            os.makedirs('icons')
        img.save('icons/cursor_tools.png')
        img.save('icons/cursor_tools.ico')
        "
      continue-on-error: true
      shell: bash

    - name: 为 Windows x64 构建
      if: matrix.os == 'windows-latest' && matrix.arch == 'x64'
      run: |
        poetry run pyinstaller --onefile --clean --icon=icons/cursor_tools.ico --name=cursor-tools cursor_tools.py

    - name: 为 macOS x64 (Intel) 构建
      if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
      run: |
        poetry run pyinstaller --onefile --clean --target-architecture x86_64 --name=cursor-tools cursor_tools.py

    - name: 为 macOS arm64 (Apple Silicon) 构建
      if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
      run: |
        poetry run pyinstaller --onefile --clean --target-architecture arm64 --name=cursor-tools cursor_tools.py

    - name: 为 Linux x64 构建
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
      run: |
        poetry run pyinstaller --onefile --clean --name=cursor-tools cursor_tools.py

    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: cursor-tools-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/${{ matrix.output_name }}

  create-release:
    name: 创建发布版本
    needs: build
    runs-on: ubuntu-latest
    # 只在主分支上创建发布
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 检出代码
      uses: actions/checkout@v3

    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 安装 Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: 获取版本号
      id: get_version
      run: |
        VERSION=$(poetry version -s)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: 下载所有构建产物
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: 准备发布文件
      run: |
        mkdir -p release
        # Windows x64
        cp ./artifacts/cursor-tools-windows-latest-x64/cursor-tools.exe ./release/cursor-tools-windows-x64.exe

        # macOS (Intel & Apple Silicon)
        cp ./artifacts/cursor-tools-macos-latest-x64/cursor-tools ./release/cursor-tools-macos-x64
        cp ./artifacts/cursor-tools-macos-latest-arm64/cursor-tools ./release/cursor-tools-macos-arm64

        # Linux x64
        cp ./artifacts/cursor-tools-ubuntu-latest-x64/cursor-tools ./release/cursor-tools-linux-x64

        # 设置执行权限
        chmod +x ./release/cursor-tools-macos-x64
        chmod +x ./release/cursor-tools-macos-arm64
        chmod +x ./release/cursor-tools-linux-x64

        # 创建通用 macOS 脚本（自动选择架构）
        cat > ./release/cursor-tools-macos << 'EOF'
        #!/bin/bash
        # 自动检测 CPU 架构并运行相应版本
        if [ "$(uname -m)" = "arm64" ]; then
          # Apple Silicon (M1/M2/M3)
          DIR="$(cd "$(dirname "$0")" && pwd)"
          exec "$DIR/cursor-tools-macos-arm64" "$@"
        else
          # Intel
          DIR="$(cd "$(dirname "$0")" && pwd)"
          exec "$DIR/cursor-tools-macos-x64" "$@"
        fi
        EOF
        chmod +x ./release/cursor-tools-macos

    - name: 创建发布说明
      id: release_notes
      run: |
        # 从 CHANGELOG.md 中提取当前版本的发布说明
        VERSION=${{ steps.get_version.outputs.version }}
        echo "提取版本 v$VERSION 的发布说明"

        # 创建临时发布说明文件
        touch RELEASE_NOTES.md

        # 提取当前版本的发布说明
        SECTION_START=$(grep -n "## v$VERSION" CHANGELOG.md | cut -d':' -f1)

        if [ -n "$SECTION_START" ]; then
          # 找到下一个版本标题或文件结束
          NEXT_SECTION=$(tail -n +$((SECTION_START+1)) CHANGELOG.md | grep -n "## v" | head -1 | cut -d':' -f1)

          if [ -n "$NEXT_SECTION" ]; then
            # 如果找到下一个版本，提取当前版本到下一个版本之间的内容
            head -n $((SECTION_START+NEXT_SECTION-1)) CHANGELOG.md | tail -n +$SECTION_START > RELEASE_NOTES.md
          else
            # 如果没有下一个版本，提取到文件结束
            tail -n +$SECTION_START CHANGELOG.md > RELEASE_NOTES.md
          fi

          # 添加下载说明
          echo "" >> RELEASE_NOTES.md
          echo "### 下载说明" >> RELEASE_NOTES.md
          echo "- **Windows**: 下载 \`cursor-tools-windows-x64.exe\`" >> RELEASE_NOTES.md
          echo "- **macOS**: " >> RELEASE_NOTES.md
          echo "  - Intel Mac: 下载 \`cursor-tools-macos-x64\`" >> RELEASE_NOTES.md
          echo "  - Apple Silicon (M1/M2/M3): 下载 \`cursor-tools-macos-arm64\`" >> RELEASE_NOTES.md
          echo "  - 或下载 \`cursor-tools-macos\` (自动检测架构)" >> RELEASE_NOTES.md
          echo "- **Linux**: 下载 \`cursor-tools-linux-x64\`" >> RELEASE_NOTES.md

          echo "✅ 成功提取发布说明"
        else
          echo "⚠️ 在 CHANGELOG.md 中未找到版本 v$VERSION"
          echo "## Cursor 工具集 v$VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "此版本包含以下功能：" >> RELEASE_NOTES.md
          echo "- 重置设备 ID (解决试用限制)" >> RELEASE_NOTES.md
          echo "- 禁用自动更新 (锁定版本)" >> RELEASE_NOTES.md
          echo "- 恢复自动更新功能" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 下载说明" >> RELEASE_NOTES.md
          echo "- **Windows**: 下载 \`cursor-tools-windows-x64.exe\`" >> RELEASE_NOTES.md
          echo "- **macOS**: " >> RELEASE_NOTES.md
          echo "  - Intel Mac: 下载 \`cursor-tools-macos-x64\`" >> RELEASE_NOTES.md
          echo "  - Apple Silicon (M1/M2/M3): 下载 \`cursor-tools-macos-arm64\`" >> RELEASE_NOTES.md
          echo "  - 或下载 \`cursor-tools-macos\` (自动检测架构)" >> RELEASE_NOTES.md
          echo "- **Linux**: 下载 \`cursor-tools-linux-x64\`" >> RELEASE_NOTES.md
        fi

        echo "" >> RELEASE_NOTES.md
        echo "### 使用方法" >> RELEASE_NOTES.md
        echo "1. 下载适合您操作系统和架构的可执行文件" >> RELEASE_NOTES.md
        echo "2. 关闭 Cursor 应用程序" >> RELEASE_NOTES.md
        echo "3. 运行下载的可执行文件" >> RELEASE_NOTES.md
        echo "4. 按照提示操作" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### 命令行参数" >> RELEASE_NOTES.md
        echo "- `reset`: 重置设备ID，解决试用限制" >> RELEASE_NOTES.md
        echo "- `disable-update`: 禁用自动更新" >> RELEASE_NOTES.md
        echo "- `enable-update`: 恢复自动更新" >> RELEASE_NOTES.md
        echo "- `--force` 或 `-f`: 跳过确认和检查，强制执行" >> RELEASE_NOTES.md
        echo "- `--version` 或 `-v`: 显示版本信息" >> RELEASE_NOTES.md

    - name: 创建发布
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./release/cursor-tools-windows-x64.exe
          ./release/cursor-tools-macos
          ./release/cursor-tools-macos-x64
          ./release/cursor-tools-macos-arm64
          ./release/cursor-tools-linux-x64
        name: Cursor 工具集 v${{ steps.get_version.outputs.version }}
        tag_name: v${{ steps.get_version.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}